{"version":3,"sources":["views/Professionals.module.scss","components/ProfessionalsTable/ProfessionalsTable.module.scss","components/ProfessionalsForm/ProfessionalsForm.module.scss","reportWebVitals.ts","components/ProfessionalsForm/ProfessionalsForm.tsx","components/Stars/Stars.tsx","components/ProfessionalsTable/ProfessionalsTable.tsx","views/Professionals.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","categories","categoriesData","filter","hidden","map","value","id","text","name","ProfessionalsForm","categoryId","postCode","setCategoryId","setPostcode","setSelectedPage","useForm","defaultValues","category","postcode","handleSubmit","setValue","Form","className","css","form","onSubmit","data","replace","toLowerCase","Field","inline","Label","pointing","Menu","compact","Dropdown","defaultValue","item","onChange","e","options","placeholder","simple","Input","size","a","Button","type","Stars","rating","rounded","Math","round","stars","Array","fill","el","index","i","ProfessionalsTable","isLoading","professionals","table","Segment","segment","Loader","active","length","main_address","review_rating","Professionals","useState","setIsLoading","paginationCount","setPaginationCount","setProfessionals","selectedPage","useEffect","fetch","method","body","headers","toString","r","forEach","Number","json","code","response","pros","catch","error","Error","finally","app","header","Pagination","activePage","disabled","onPageChange","event","totalPages","ceil","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3645ab9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Professionals_app__nZBc8\",\"header\":\"Professionals_header__1waQw\",\"pagination\":\"Professionals_pagination__1Nr_H\",\"selected\":\"Professionals_selected__2uuKB\",\"disabled\":\"Professionals_disabled__3C-Mx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"ProfessionalsTable_table__23ac6\",\"segment\":\"ProfessionalsTable_segment__6xszI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"segment\":\"ProfessionalsForm_segment__1qHp-\",\"form\":\"ProfessionalsForm_form__1Rxp0\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport categoriesData from \"../../data/categories.json\";\r\nimport { Button, Dropdown, Form, Input, Label, Menu } from \"semantic-ui-react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport css from \"./ProfessionalsForm.module.scss\";\r\n\r\nconst categories = [\r\n  ...categoriesData\r\n    .filter(({ hidden }) => hidden)\r\n    .map(({ id, name }) => ({ value: id, text: name })),\r\n];\r\n\r\ninterface Props {\r\n  categoryId: number;\r\n  postCode: string;\r\n  setCategoryId: (id: number) => void;\r\n  setPostcode: (code: string) => void;\r\n  setSelectedPage: (page: number) => void;\r\n}\r\n\r\nexport const ProfessionalsForm: React.FC<Props> = ({\r\n  categoryId,\r\n  postCode,\r\n  setCategoryId,\r\n  setPostcode,\r\n  setSelectedPage,\r\n}) => {\r\n  const { handleSubmit, setValue } = useForm({\r\n    defaultValues: { category: 2, postcode: \"sw11\" },\r\n  });\r\n\r\n  const onSubmit = (data: { category: number; postcode: string }) => {\r\n    setCategoryId(data.category);\r\n    setPostcode(data.postcode.replace(/ /g, \"\").toLowerCase());\r\n    setSelectedPage(0);\r\n  };\r\n\r\n  return (\r\n    <Form className={css.form} onSubmit={handleSubmit(onSubmit)}>\r\n      <Form.Field inline>\r\n        <Label pointing=\"right\">Profession</Label>\r\n        <Menu compact>\r\n          <Dropdown\r\n            defaultValue={categoryId}\r\n            item\r\n            name=\"category\"\r\n            onChange={(e, { name, value }) => {\r\n              setValue(name, value);\r\n            }}\r\n            options={categories}\r\n            placeholder=\"Categories\"\r\n            simple\r\n          />\r\n        </Menu>\r\n      </Form.Field>\r\n\r\n      <Form.Field inline>\r\n        <Label pointing=\"right\">Post code</Label>\r\n        <Input\r\n          name=\"postcode\"\r\n          size=\"large\"\r\n          onChange={async (e, { name, value }) => {\r\n            setValue(name, value);\r\n          }}\r\n          defaultValue={postCode}\r\n        />\r\n      </Form.Field>\r\n      <Form.Field inline>\r\n        <Button type=\"submit\" size=\"large\">\r\n          Submit\r\n        </Button>\r\n      </Form.Field>\r\n    </Form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  rating: number;\r\n}\r\nconst maxStars = 5;\r\n\r\nexport const Stars: React.FC<Props> = ({ rating }) => {\r\n  const rounded = Math.round(rating);\r\n  const stars = Array(maxStars)\r\n    .fill(null)\r\n    .map((el, index) => (index < rounded ? \"\\u2605\" : \"\\u2606\"));\r\n  return <span>{stars.map((i) => i)}</span>;\r\n};\r\n","import React from \"react\";\r\nimport css from \"./ProfessionalsTable.module.scss\";\r\nimport { Loader, Segment } from \"semantic-ui-react\";\r\nimport { Pro } from \"../../types/professionals\";\r\nimport { Stars } from \"../Stars/Stars\";\r\n\r\ninterface Props {\r\n  isLoading: boolean;\r\n  professionals: Pro[];\r\n}\r\n\r\nexport const ProfessionalsTable: React.FC<Props> = ({\r\n  isLoading,\r\n  professionals,\r\n}) => {\r\n  return (\r\n    <div className={css.table}>\r\n      <Segment className={css.segment}>\r\n        {isLoading ? (\r\n          <Loader active />\r\n        ) : !!professionals.length ? (\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Name</th>\r\n                <th>Postcode</th>\r\n                <th>Review Rating</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {professionals.map(\r\n                ({ name, id, main_address, review_rating }) => {\r\n                  return (\r\n                    <tr key={id}>\r\n                      <td>{id}</td>\r\n                      <td>{name}</td>\r\n                      <td>{main_address.postcode}</td>\r\n                      <td>\r\n                        <Stars rating={review_rating} />\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                }\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        ) : (\r\n          <p>No results for the selected profession and postcode.</p>\r\n        )}\r\n      </Segment>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { ProfessionalsResponse, Pro } from \"../types/professionals\";\r\n\r\nimport { Pagination } from \"semantic-ui-react\";\r\n\r\nimport css from \"./Professionals.module.scss\";\r\n\r\nimport { PaginationProps } from \"semantic-ui-react/dist/commonjs/addons/Pagination/Pagination\";\r\nimport { ProfessionalsForm } from \"../components/ProfessionalsForm/ProfessionalsForm\";\r\nimport { ProfessionalsTable } from \"../components/ProfessionalsTable/ProfessionalsTable\";\r\n\r\nconst ITEMS_PER_PAGE = 20;\r\nexport const URL =\r\n  \"https://demo.plentific.com/uk/find-a-pro/api/v2/public/pro/search-pros/\";\r\n\r\nconst Professionals = () => {\r\n  const [categoryId, setCategoryId] = useState<number>(2);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [paginationCount, setPaginationCount] = useState<number>(0);\r\n  const [postCode, setPostcode] = useState<string>(\"sw11\");\r\n  const [professionals, setProfessionals] = useState<Pro[]>([]);\r\n  const [selectedPage, setSelectedPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    fetch(URL, {\r\n      method: \"POST\",\r\n      body: `{\"category_id\": \"${categoryId}\", \"location\": \"${postCode}\"}`,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"x-pagination-offset\": (selectedPage * ITEMS_PER_PAGE).toString(),\r\n        \"x-pagination-limit\": ITEMS_PER_PAGE.toString(),\r\n      },\r\n    })\r\n      .then((r) => {\r\n        r.headers.forEach(function (value, name) {\r\n          if (name === \"x-pagination-count\") {\r\n            setPaginationCount(Number(value));\r\n          }\r\n        });\r\n        return r.json();\r\n      })\r\n      .then((data: ProfessionalsResponse) => {\r\n        if (data.code === 0) {\r\n          setProfessionals([...data.response.pros]);\r\n        } else {\r\n          setProfessionals([]);\r\n          setPaginationCount(0);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        throw Error(error);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }, [selectedPage, postCode, categoryId]);\r\n\r\n  const handlePageClick = (\r\n    event: React.MouseEvent<HTMLAnchorElement>,\r\n    data: PaginationProps\r\n  ) => {\r\n    if (typeof data.activePage === \"number\") {\r\n      setSelectedPage(data.activePage - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={css.app}>\r\n      <div className={css.header}>\r\n        <h1>Your site</h1>\r\n      </div>\r\n\r\n      <ProfessionalsForm\r\n        categoryId={categoryId}\r\n        postCode={postCode}\r\n        setCategoryId={setCategoryId}\r\n        setPostcode={setPostcode}\r\n        setSelectedPage={setSelectedPage}\r\n      />\r\n      <ProfessionalsTable isLoading={isLoading} professionals={professionals} />\r\n      <Pagination\r\n        activePage={selectedPage + 1}\r\n        disabled={isLoading || paginationCount === 0}\r\n        onPageChange={handlePageClick}\r\n        totalPages={Math.ceil(paginationCount / ITEMS_PER_PAGE)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Professionals;\r\n","import React from \"react\";\r\n\r\nimport Professionals from \"./views/Professionals\";\r\n\r\nconst App = () => {\r\n  return <Professionals />;\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}